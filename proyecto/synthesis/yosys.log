
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 11.0.0 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ../rtl/alu.v
Parsing Verilog input from `../rtl/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../rtl/aluControl.v
Parsing Verilog input from `../rtl/aluControl.v' to AST representation.
Generating RTLIL representation for module `\aluControl'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ../rtl/control.v
Parsing Verilog input from `../rtl/control.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ../rtl/datapath.v
Parsing Verilog input from `../rtl/datapath.v' to AST representation.
Generating RTLIL representation for module `\datapath'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ../rtl/mips.v
Parsing Verilog input from `../rtl/mips.v' to AST representation.
Generating RTLIL representation for module `\mips'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: ../rtl/mux2to1.v
Parsing Verilog input from `../rtl/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: ../rtl/mux4to1.v
Parsing Verilog input from `../rtl/mux4to1.v' to AST representation.
Generating RTLIL representation for module `\mux4to1'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: ../rtl/nextPCLogic.v
Parsing Verilog input from `../rtl/nextPCLogic.v' to AST representation.
Generating RTLIL representation for module `\nextPCLogic'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: ../rtl/regfile.v
Parsing Verilog input from `../rtl/regfile.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: ../rtl/register.v
Parsing Verilog input from `../rtl/register.v' to AST representation.
Generating RTLIL representation for module `\register'.
Warning: Replacing memory \register with list of registers. See ../rtl/register.v:18
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: ../rtl/shiftLeft32.v
Parsing Verilog input from `../rtl/shiftLeft32.v' to AST representation.
Generating RTLIL representation for module `\shiftLeft32'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: ../rtl/signExtend.v
Parsing Verilog input from `../rtl/signExtend.v' to AST representation.
Generating RTLIL representation for module `\signExtend'.
Successfully finished Verilog frontend.

13. Executing SYNTH pass.

13.1. Executing HIERARCHY pass (managing design hierarchy).

13.1.1. Analyzing design hierarchy..
Top module:  \mips
Used module:     \datapath
Used module:         \mux2to1
Used module:         \mux4to1
Used module:         \shiftLeft32
Used module:         \register
Used module:         \alu
Used module:         \signExtend
Used module:         \regfile
Used module:     \nextPCLogic
Used module:     \aluControl
Used module:     \control

13.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 4
Generating RTLIL representation for module `$paramod\register\N=4'.
Warning: Replacing memory \register with list of registers. See ../rtl/register.v:18

13.1.3. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter \N = 32
Generating RTLIL representation for module `$paramod\mux2to1\N=32'.

13.1.4. Executing AST frontend in derive mode using pre-parsed AST for module `\mux4to1'.
Parameter \N = 32
Generating RTLIL representation for module `$paramod\mux4to1\N=32'.

13.1.5. Executing AST frontend in derive mode using pre-parsed AST for module `\shiftLeft32'.
Parameter \N = 28
Generating RTLIL representation for module `$paramod\shiftLeft32\N=28'.

13.1.6. Executing AST frontend in derive mode using pre-parsed AST for module `\alu'.
Parameter \N = 32
Generating RTLIL representation for module `$paramod\alu\N=32'.

13.1.7. Executing AST frontend in derive mode using pre-parsed AST for module `\mux4to1'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\mux4to1\N=32'.

13.1.8. Executing AST frontend in derive mode using pre-parsed AST for module `\shiftLeft32'.
Parameter \N = 32
Generating RTLIL representation for module `$paramod\shiftLeft32\N=32'.

13.1.9. Executing AST frontend in derive mode using pre-parsed AST for module `\signExtend'.
Parameter \N = 32
Parameter \I = 16
Generating RTLIL representation for module `$paramod\signExtend\N=32\I=16'.

13.1.10. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\mux2to1\N=32'.

13.1.11. Executing AST frontend in derive mode using pre-parsed AST for module `\regfile'.
Parameter \N = 32
Generating RTLIL representation for module `$paramod\regfile\N=32'.

13.1.12. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\mux2to1\N=32'.

13.1.13. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter \N = 5
Generating RTLIL representation for module `$paramod\mux2to1\N=5'.

13.1.14. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Generating RTLIL representation for module `$paramod\register\N=32'.
Warning: Replacing memory \register with list of registers. See ../rtl/register.v:18

13.1.15. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.16. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.17. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.18. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.19. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.20. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.21. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.22. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.23. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.24. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.25. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.26. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.27. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.28. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.29. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.30. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.31. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.32. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.33. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.34. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.35. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.36. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.37. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.38. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.39. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.40. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.41. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.42. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.43. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.44. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.45. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.46. Analyzing design hierarchy..
Top module:  \mips
Used module:     \datapath
Used module:         $paramod\mux2to1\N=32
Used module:         $paramod\mux4to1\N=32
Used module:         $paramod\shiftLeft32\N=28
Used module:         \register
Used module:         $paramod\alu\N=32
Used module:         $paramod\shiftLeft32\N=32
Used module:         $paramod\signExtend\N=32\I=16
Used module:         $paramod\regfile\N=32
Used module:         $paramod\mux2to1\N=5
Used module:     \nextPCLogic
Used module:     \aluControl
Used module:     \control
Used module:         $paramod\register\N=4

13.1.47. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.48. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.49. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.50. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.51. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.52. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.53. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.54. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.55. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.56. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.57. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.58. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.59. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.60. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.61. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.62. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.63. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.64. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.65. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.66. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.67. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.68. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.69. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.70. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.71. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.72. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.73. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.74. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.75. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.76. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.77. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.78. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\register\N=32'.

13.1.79. Analyzing design hierarchy..
Top module:  \mips
Used module:     \datapath
Used module:         $paramod\mux2to1\N=32
Used module:         $paramod\mux4to1\N=32
Used module:         $paramod\shiftLeft32\N=28
Used module:         \register
Used module:         $paramod\alu\N=32
Used module:         $paramod\shiftLeft32\N=32
Used module:         $paramod\signExtend\N=32\I=16
Used module:         $paramod\regfile\N=32
Used module:             $paramod\register\N=32
Used module:         $paramod\mux2to1\N=5
Used module:     \nextPCLogic
Used module:     \aluControl
Used module:     \control
Used module:         $paramod\register\N=4

13.1.80. Analyzing design hierarchy..
Top module:  \mips
Used module:     \datapath
Used module:         $paramod\mux2to1\N=32
Used module:         $paramod\mux4to1\N=32
Used module:         $paramod\shiftLeft32\N=28
Used module:         \register
Used module:         $paramod\alu\N=32
Used module:         $paramod\shiftLeft32\N=32
Used module:         $paramod\signExtend\N=32\I=16
Used module:         $paramod\regfile\N=32
Used module:             $paramod\register\N=32
Used module:         $paramod\mux2to1\N=5
Used module:     \nextPCLogic
Used module:     \aluControl
Used module:     \control
Used module:         $paramod\register\N=4
Removing unused module `\signExtend'.
Removing unused module `\shiftLeft32'.
Removing unused module `\regfile'.
Removing unused module `\mux4to1'.
Removing unused module `\mux2to1'.
Removing unused module `\alu'.
Removed 6 unused modules.

13.2. Executing PROC pass (convert processes to netlists).

13.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\register\N=4.$proc$../rtl/register.v:11$91'.
Removing empty process `$paramod\register\N=4.$proc$../rtl/register.v:11$91'.
Found and cleaned up 1 empty switch in `$paramod\register\N=32.$proc$../rtl/register.v:11$161'.
Removing empty process `$paramod\register\N=32.$proc$../rtl/register.v:11$161'.
Found and cleaned up 1 empty switch in `\register.$proc$../rtl/register.v:11$86'.
Removing empty process `register.$proc$../rtl/register.v:11$86'.
Cleaned up 3 empty switches.

13.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$../rtl/mux4to1.v:7$93 in module $paramod\mux4to1\N=32.
Marked 1 switch rules as full_case in process $proc$../rtl/mux4to1.v:7$93 in module $paramod\mux4to1\N=32.
Marked 1 switch rules as full_case in process $proc$../rtl/register.v:17$89 in module $paramod\register\N=4.
Marked 1 switch rules as full_case in process $proc$../rtl/register.v:17$159 in module $paramod\register\N=32.
Marked 1 switch rules as full_case in process $proc$../rtl/register.v:17$84 in module register.
Removed 3 dead cases from process $proc$../rtl/regfile.v:35$147 in module $paramod\regfile\N=32.
Marked 4 switch rules as full_case in process $proc$../rtl/regfile.v:35$147 in module $paramod\regfile\N=32.
Marked 1 switch rules as full_case in process $proc$../rtl/control.v:82$32 in module control.
Marked 9 switch rules as full_case in process $proc$../rtl/control.v:53$21 in module control.
Marked 3 switch rules as full_case in process $proc$../rtl/aluControl.v:25$18 in module aluControl.
Marked 1 switch rules as full_case in process $proc$../rtl/alu.v:19$97 in module $paramod\alu\N=32.
Removed a total of 4 dead cases.

13.2.3. Executing PROC_INIT pass (extract init attributes).

13.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `$paramod\register\N=4.$proc$../rtl/register.v:17$89'.
Found async reset \rst in `$paramod\register\N=32.$proc$../rtl/register.v:17$159'.
Found async reset \rst in `\register.$proc$../rtl/register.v:17$84'.

13.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\mux4to1\N=32.$proc$../rtl/mux4to1.v:7$93'.
     1/2: $1\dout[31:0]
     2/2: $0\dout[31:0]
Creating decoders for process `$paramod\register\N=4.$proc$../rtl/register.v:17$89'.
     1/1: $0\register[0][3:0]
Creating decoders for process `$paramod\register\N=32.$proc$../rtl/register.v:17$159'.
     1/1: $0\register[0][31:0]
Creating decoders for process `\register.$proc$../rtl/register.v:17$84'.
     1/1: $0\register[0][31:0]
Creating decoders for process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
     1/48: $2$mem2reg_rd$\regOut$../rtl/regfile.v:42$146_DATA[31:0]$157
     2/48: $2$mem2reg_rd$\regOut$../rtl/regfile.v:41$145_DATA[31:0]$156
     3/48: $2\regEn[31:0] [30]
     4/48: $2\regEn[31:0] [29]
     5/48: $2\regEn[31:0] [27]
     6/48: $2\regEn[31:0] [25]
     7/48: $2\regEn[31:0] [23]
     8/48: $2\regEn[31:0] [21]
     9/48: $2\regEn[31:0] [19]
    10/48: $2\regEn[31:0] [17]
    11/48: $2\regEn[31:0] [15]
    12/48: $2\regEn[31:0] [13]
    13/48: $2\regEn[31:0] [11]
    14/48: $2\regEn[31:0] [9]
    15/48: $2\regEn[31:0] [7]
    16/48: $2\regEn[31:0] [5]
    17/48: $2\regEn[31:0] [3]
    18/48: $2\regEn[31:0] [1]
    19/48: $2\regEn[31:0] [31]
    20/48: $2\regEn[31:0] [26]
    21/48: $2\regEn[31:0] [22]
    22/48: $2\regEn[31:0] [18]
    23/48: $2\regEn[31:0] [14]
    24/48: $2\regEn[31:0] [10]
    25/48: $2\regEn[31:0] [6]
    26/48: $2\regEn[31:0] [2]
    27/48: $2\regEn[31:0] [28]
    28/48: $2\regEn[31:0] [20]
    29/48: $2\regEn[31:0] [12]
    30/48: $2\regEn[31:0] [4]
    31/48: $2\regEn[31:0] [24]
    32/48: $2\regEn[31:0] [8]
    33/48: $2\regEn[31:0] [16]
    34/48: $2\regEn[31:0] [0]
    35/48: $1\regEn[31:0]
    36/48: $1$mem2reg_rd$\regOut$../rtl/regfile.v:42$146_DATA[31:0]$155
    37/48: $1$mem2reg_rd$\regOut$../rtl/regfile.v:41$145_ADDR[4:0]$154
    38/48: $1$mem2reg_rd$\regOut$../rtl/regfile.v:42$146_ADDR[4:0]$153
    39/48: $1$mem2reg_rd$\regOut$../rtl/regfile.v:41$145_DATA[31:0]$152
    40/48: $1\data2[31:0]
    41/48: $1\data1[31:0]
    42/48: $0$mem2reg_rd$\regOut$../rtl/regfile.v:42$146_DATA[31:0]$151
    43/48: $0$mem2reg_rd$\regOut$../rtl/regfile.v:41$145_ADDR[4:0]$150
    44/48: $0$mem2reg_rd$\regOut$../rtl/regfile.v:42$146_ADDR[4:0]$149
    45/48: $0$mem2reg_rd$\regOut$../rtl/regfile.v:41$145_DATA[31:0]$148
    46/48: $0\regEn[31:0]
    47/48: $0\data2[31:0]
    48/48: $0\data1[31:0]
Creating decoders for process `\control.$proc$../rtl/control.v:82$32'.
     1/26: $1\PCWrite[0:0]
     2/26: $1\IRWrite[0:0]
     3/26: $1\PCSource[1:0]
     4/26: $1\ALUOp[1:0]
     5/26: $1\ALUSrcB[1:0]
     6/26: $1\ALUSrcA[0:0]
     7/26: $1\IorD[0:0]
     8/26: $1\BranchNe[0:0]
     9/26: $1\Branch[0:0]
    10/26: $1\RegDst[0:0]
    11/26: $1\RegWrite[0:0]
    12/26: $1\MemToReg[0:0]
    13/26: $1\MemWrite[0:0]
    14/26: $0\PCSource[1:0]
    15/26: $0\ALUSrcB[1:0]
    16/26: $0\BranchNe[0:0]
    17/26: $0\Branch[0:0]
    18/26: $0\RegDst[0:0]
    19/26: $0\RegWrite[0:0]
    20/26: $0\PCWrite[0:0]
    21/26: $0\IRWrite[0:0]
    22/26: $0\MemToReg[0:0]
    23/26: $0\MemWrite[0:0]
    24/26: $0\IorD[0:0]
    25/26: $0\ALUSrcA[0:0]
    26/26: $0\ALUOp[1:0]
Creating decoders for process `\control.$proc$../rtl/control.v:53$21'.
     1/10: $9\next[3:0]
     2/10: $8\next[3:0]
     3/10: $7\next[3:0]
     4/10: $6\next[3:0]
     5/10: $5\next[3:0]
     6/10: $4\next[3:0]
     7/10: $3\next[3:0]
     8/10: $2\next[3:0]
     9/10: $1\next[3:0]
    10/10: $0\next[3:0]
Creating decoders for process `\aluControl.$proc$../rtl/aluControl.v:25$18'.
     1/4: $3\ALUControl[3:0]
     2/4: $2\ALUControl[3:0]
     3/4: $1\ALUControl[3:0]
     4/4: $0\ALUControl[3:0]
Creating decoders for process `$paramod\alu\N=32.$proc$../rtl/alu.v:19$97'.
     1/4: $1\ALUOverflow[0:0]
     2/4: $1\ALUResult[31:0]
     3/4: $0\ALUOverflow[0:0]
     4/4: $0\ALUResult[31:0]

13.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\mux4to1\N=32.\dout' from process `$paramod\mux4to1\N=32.$proc$../rtl/mux4to1.v:7$93'.
No latch inferred for signal `$paramod\regfile\N=32.\data1' from process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
No latch inferred for signal `$paramod\regfile\N=32.\data2' from process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
No latch inferred for signal `$paramod\regfile\N=32.\regEn' from process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
No latch inferred for signal `$paramod\regfile\N=32.$mem2reg_rd$\regOut$../rtl/regfile.v:41$145_DATA' from process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
No latch inferred for signal `$paramod\regfile\N=32.$mem2reg_rd$\regOut$../rtl/regfile.v:42$146_ADDR' from process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
No latch inferred for signal `$paramod\regfile\N=32.$mem2reg_rd$\regOut$../rtl/regfile.v:41$145_ADDR' from process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
No latch inferred for signal `$paramod\regfile\N=32.$mem2reg_rd$\regOut$../rtl/regfile.v:42$146_DATA' from process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
No latch inferred for signal `\control.\ALUOp' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\ALUSrcA' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\IorD' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\MemWrite' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\MemToReg' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\IRWrite' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\PCWrite' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\RegWrite' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\RegDst' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\Branch' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\BranchNe' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\ALUSrcB' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\PCSource' from process `\control.$proc$../rtl/control.v:82$32'.
No latch inferred for signal `\control.\next' from process `\control.$proc$../rtl/control.v:53$21'.
No latch inferred for signal `\aluControl.\ALUControl' from process `\aluControl.$proc$../rtl/aluControl.v:25$18'.
No latch inferred for signal `$paramod\alu\N=32.\ALUResult' from process `$paramod\alu\N=32.$proc$../rtl/alu.v:19$97'.
No latch inferred for signal `$paramod\alu\N=32.\ALUOverflow' from process `$paramod\alu\N=32.$proc$../rtl/alu.v:19$97'.

13.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\register\N=4.\register[0]' using process `$paramod\register\N=4.$proc$../rtl/register.v:17$89'.
  created $adff cell `$procdff$1756' with positive edge clock and negative level reset.
Creating register for signal `$paramod\register\N=32.\register[0]' using process `$paramod\register\N=32.$proc$../rtl/register.v:17$159'.
  created $adff cell `$procdff$1757' with positive edge clock and negative level reset.
Creating register for signal `\register.\register[0]' using process `\register.$proc$../rtl/register.v:17$84'.
  created $adff cell `$procdff$1758' with positive edge clock and negative level reset.

13.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\mux4to1\N=32.$proc$../rtl/mux4to1.v:7$93'.
Removing empty process `$paramod\mux4to1\N=32.$proc$../rtl/mux4to1.v:7$93'.
Found and cleaned up 1 empty switch in `$paramod\register\N=4.$proc$../rtl/register.v:17$89'.
Removing empty process `$paramod\register\N=4.$proc$../rtl/register.v:17$89'.
Found and cleaned up 1 empty switch in `$paramod\register\N=32.$proc$../rtl/register.v:17$159'.
Removing empty process `$paramod\register\N=32.$proc$../rtl/register.v:17$159'.
Found and cleaned up 1 empty switch in `\register.$proc$../rtl/register.v:17$84'.
Removing empty process `register.$proc$../rtl/register.v:17$84'.
Found and cleaned up 4 empty switches in `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
Removing empty process `$paramod\regfile\N=32.$proc$../rtl/regfile.v:35$147'.
Found and cleaned up 1 empty switch in `\control.$proc$../rtl/control.v:82$32'.
Removing empty process `control.$proc$../rtl/control.v:82$32'.
Found and cleaned up 9 empty switches in `\control.$proc$../rtl/control.v:53$21'.
Removing empty process `control.$proc$../rtl/control.v:53$21'.
Found and cleaned up 3 empty switches in `\aluControl.$proc$../rtl/aluControl.v:25$18'.
Removing empty process `aluControl.$proc$../rtl/aluControl.v:25$18'.
Found and cleaned up 1 empty switch in `$paramod\alu\N=32.$proc$../rtl/alu.v:19$97'.
Removing empty process `$paramod\alu\N=32.$proc$../rtl/alu.v:19$97'.
Cleaned up 22 empty switches.

13.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\shiftLeft32\N=28.
<suppressed ~1 debug messages>
Optimizing module $paramod\mux4to1\N=32.
<suppressed ~1 debug messages>
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module register.
Optimizing module $paramod\regfile\N=32.
<suppressed ~34 debug messages>
Optimizing module nextPCLogic.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module $paramod\shiftLeft32\N=32.
<suppressed ~1 debug messages>
Optimizing module mips.
Optimizing module datapath.
Optimizing module control.
<suppressed ~4 debug messages>
Optimizing module aluControl.
<suppressed ~2 debug messages>
Optimizing module $paramod\alu\N=32.
<suppressed ~1 debug messages>

13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module $paramod\alu\N=32..
Removed 7 unused cells and 211 unused wires.
<suppressed ~21 debug messages>

13.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\alu\N=32..
checking module $paramod\mux2to1\N=32..
checking module $paramod\mux2to1\N=5..
checking module $paramod\mux4to1\N=32..
checking module $paramod\regfile\N=32..
checking module $paramod\register\N=32..
checking module $paramod\register\N=4..
checking module $paramod\shiftLeft32\N=28..
checking module $paramod\shiftLeft32\N=32..
checking module $paramod\signExtend\N=32\I=16..
checking module aluControl..
checking module control..
Warning: Wire control.\MemRead is used but has no driver.
checking module datapath..
checking module mips..
checking module nextPCLogic..
checking module register..
found and reported 1 problems.

13.6. Executing OPT pass (performing simple optimizations).

13.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
<suppressed ~9 debug messages>
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
<suppressed ~2976 debug messages>
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
<suppressed ~93 debug messages>
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 1026 cells.

13.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\alu\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux4to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\regfile\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$603.
    dead port 1/2 on $mux $procmux$243.
    dead port 2/2 on $mux $procmux$1143.
    dead port 2/2 on $mux $procmux$423.
    dead port 2/2 on $mux $procmux$1071.
    dead port 2/2 on $mux $procmux$819.
    dead port 2/2 on $mux $procmux$1323.
    dead port 2/2 on $mux $procmux$639.
    dead port 2/2 on $mux $procmux$1251.
    dead port 2/2 on $mux $procmux$279.
    dead port 2/2 on $mux $procmux$459.
    dead port 2/2 on $mux $procmux$855.
    dead port 2/2 on $mux $procmux$1179.
    dead port 2/2 on $mux $procmux$1107.
    dead port 2/2 on $mux $procmux$1035.
    dead port 2/2 on $mux $procmux$1359.
    dead port 2/2 on $mux $procmux$675.
    dead port 2/2 on $mux $procmux$315.
    dead port 2/2 on $mux $procmux$495.
    dead port 2/2 on $mux $procmux$891.
    dead port 2/2 on $mux $procmux$1287.
    dead port 2/2 on $mux $procmux$1215.
    dead port 2/2 on $mux $procmux$711.
    dead port 2/2 on $mux $procmux$1395.
    dead port 2/2 on $mux $procmux$927.
    dead port 2/2 on $mux $procmux$531.
    dead port 2/2 on $mux $procmux$351.
    dead port 2/2 on $mux $procmux$747.
    dead port 2/2 on $mux $procmux$963.
    dead port 1/2 on $mux $procmux$207.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$387.
    dead port 2/2 on $mux $procmux$783.
    dead port 2/2 on $mux $procmux$999.
Running muxtree optimizer on module $paramod\register\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shiftLeft32\N=28..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shiftLeft32\N=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\signExtend\N=32\I=16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$../rtl/signExtend.v:7$113: { 16'0000000000000000 \din } -> { 17'00000000000000000 \din [14:0] }
      Replacing known input bits on port B of cell $ternary$../rtl/signExtend.v:7$113: { 16'1111111111111111 \din } -> { 17'11111111111111111 \din [14:0] }
  Analyzing evaluation results.
Running muxtree optimizer on module \aluControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1726.
    dead port 1/2 on $mux $procmux$1729.
    dead port 1/2 on $mux $procmux$1735.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$1541.
    dead port 2/2 on $mux $procmux$1543.
    dead port 2/2 on $mux $procmux$1559.
    dead port 1/2 on $mux $procmux$1577.
    dead port 1/2 on $mux $procmux$1580.
    dead port 1/2 on $mux $procmux$1583.
    dead port 1/2 on $mux $procmux$1586.
    dead port 1/2 on $mux $procmux$1589.
    dead port 2/2 on $mux $procmux$1591.
    dead port 1/2 on $mux $procmux$1609.
    dead port 1/2 on $mux $procmux$1612.
    dead port 1/2 on $mux $procmux$1615.
    dead port 1/2 on $mux $procmux$1618.
    dead port 2/2 on $mux $procmux$1620.
    dead port 1/2 on $mux $procmux$1638.
    dead port 1/2 on $mux $procmux$1641.
    dead port 1/2 on $mux $procmux$1644.
    dead port 2/2 on $mux $procmux$1646.
    dead port 1/2 on $mux $procmux$1664.
    dead port 1/2 on $mux $procmux$1667.
    dead port 2/2 on $mux $procmux$1669.
    dead port 1/2 on $mux $procmux$1687.
    dead port 2/2 on $mux $procmux$1689.
    dead port 2/2 on $mux $procmux$1706.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mips..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \nextPCLogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 61 multiplexer ports.
<suppressed ~27 debug messages>

13.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\alu\N=32.
    New input vector for $reduce_or cell $reduce_or$../rtl/alu.v:17$95: { \ALUResult [0] \ALUResult [1] \ALUResult [2] \ALUResult [3] \ALUResult [4] \ALUResult [5] \ALUResult [6] \ALUResult [7] \ALUResult [8] \ALUResult [9] \ALUResult [10] \ALUResult [11] \ALUResult [12] \ALUResult [13] \ALUResult [14] \ALUResult [15] \ALUResult [16] \ALUResult [17] \ALUResult [18] \ALUResult [19] \ALUResult [20] \ALUResult [21] \ALUResult [22] \ALUResult [23] \ALUResult [24] \ALUResult [25] \ALUResult [26] \ALUResult [27] \ALUResult [28] \ALUResult [29] \ALUResult [30] \ALUResult [31] }
  Optimizing cells in module $paramod\alu\N=32.
  Optimizing cells in module $paramod\mux2to1\N=32.
  Optimizing cells in module $paramod\mux2to1\N=5.
  Optimizing cells in module $paramod\mux4to1\N=32.
  Optimizing cells in module $paramod\regfile\N=32.
    New ctrl vector for $pmux cell $procmux$1326: { $procmux$1018_CMP $auto$opt_reduce.cc:132:opt_mux$1760 }
    New ctrl vector for $pmux cell $procmux$642: { $procmux$1025_CMP $auto$opt_reduce.cc:132:opt_mux$1762 }
    New ctrl vector for $pmux cell $procmux$1254: { $procmux$1010_CMP $auto$opt_reduce.cc:132:opt_mux$1764 }
    New ctrl vector for $pmux cell $procmux$282: { $procmux$1005_CMP $auto$opt_reduce.cc:132:opt_mux$1766 }
    New ctrl vector for $pmux cell $procmux$462: { $procmux$1015_CMP $auto$opt_reduce.cc:132:opt_mux$1768 }
    New ctrl vector for $pmux cell $procmux$606: { $procmux$1023_CMP $auto$opt_reduce.cc:132:opt_mux$1770 }
    New ctrl vector for $pmux cell $procmux$858: { $procmux$1008_CMP $auto$opt_reduce.cc:132:opt_mux$1772 }
    New ctrl vector for $pmux cell $procmux$1182: { $procmux$1022_CMP $auto$opt_reduce.cc:132:opt_mux$1774 }
    New ctrl vector for $pmux cell $procmux$246: { $procmux$1004_CMP $auto$opt_reduce.cc:132:opt_mux$1776 }
    New ctrl vector for $pmux cell $procmux$1110: { $procmux$1006_CMP $auto$opt_reduce.cc:132:opt_mux$1778 }
    New ctrl vector for $pmux cell $procmux$1038: { $procmux$1028_CMP $auto$opt_reduce.cc:132:opt_mux$1780 }
    New ctrl vector for $pmux cell $procmux$1362: { $procmux$1034_CMP $auto$opt_reduce.cc:132:opt_mux$1782 }
    New ctrl vector for $pmux cell $procmux$678: { $procmux$1027_CMP $auto$opt_reduce.cc:132:opt_mux$1784 }
    New ctrl vector for $pmux cell $procmux$426: { $procmux$1013_CMP $auto$opt_reduce.cc:132:opt_mux$1786 }
    New ctrl vector for $pmux cell $procmux$498: { $procmux$1017_CMP $auto$opt_reduce.cc:132:opt_mux$1788 }
    New ctrl vector for $pmux cell $procmux$1146: { $procmux$1014_CMP $auto$opt_reduce.cc:132:opt_mux$1790 }
    New ctrl vector for $pmux cell $procmux$894: { $procmux$1012_CMP $auto$opt_reduce.cc:132:opt_mux$1792 }
    New ctrl vector for $pmux cell $procmux$318: { $procmux$1007_CMP $auto$opt_reduce.cc:132:opt_mux$1794 }
    New ctrl vector for $pmux cell $procmux$1290: { $procmux$1026_CMP $auto$opt_reduce.cc:132:opt_mux$1796 }
    New ctrl vector for $pmux cell $procmux$1002: { $procmux$1024_CMP $auto$opt_reduce.cc:132:opt_mux$1798 }
    New ctrl vector for $pmux cell $procmux$1218: { $procmux$1030_CMP $auto$opt_reduce.cc:132:opt_mux$1800 }
    New ctrl vector for $pmux cell $procmux$714: { $procmux$1029_CMP $auto$opt_reduce.cc:132:opt_mux$1802 }
    New ctrl vector for $pmux cell $procmux$1074: { $procmux$1032_CMP $auto$opt_reduce.cc:132:opt_mux$1804 }
    New ctrl vector for $pmux cell $procmux$930: { $procmux$1016_CMP $auto$opt_reduce.cc:132:opt_mux$1806 }
    New ctrl vector for $pmux cell $procmux$534: { $procmux$1019_CMP $auto$opt_reduce.cc:132:opt_mux$1808 }
    New ctrl vector for $pmux cell $procmux$354: { $procmux$1009_CMP $auto$opt_reduce.cc:132:opt_mux$1810 }
    New ctrl vector for $pmux cell $procmux$750: { $procmux$1031_CMP $auto$opt_reduce.cc:132:opt_mux$1812 }
    New ctrl vector for $pmux cell $procmux$822: { $auto$opt_reduce.cc:132:opt_mux$1814 $procmux$1003_CMP }
    New ctrl vector for $pmux cell $procmux$966: { $procmux$1020_CMP $auto$opt_reduce.cc:132:opt_mux$1816 }
    New ctrl vector for $pmux cell $procmux$570: { $procmux$1021_CMP $auto$opt_reduce.cc:132:opt_mux$1818 }
    New ctrl vector for $pmux cell $procmux$390: { $procmux$1011_CMP $auto$opt_reduce.cc:132:opt_mux$1820 }
    New ctrl vector for $pmux cell $procmux$786: { $procmux$1033_CMP $auto$opt_reduce.cc:132:opt_mux$1822 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1759: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1761: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1763: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1765: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1767: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1769: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1771: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1773: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1775: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1777: { $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1779: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1781: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1783: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1785: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1787: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1789: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1791: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1793: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1795: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1797: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1799: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1801: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1803: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1805: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1807: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1809: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1811: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1813: { $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1815: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1817: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1819: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1821: { $procmux$1006_CMP $procmux$1003_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1034_CMP }
  Optimizing cells in module $paramod\regfile\N=32.
  Optimizing cells in module $paramod\register\N=32.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\shiftLeft32\N=28.
  Optimizing cells in module $paramod\shiftLeft32\N=32.
  Optimizing cells in module $paramod\signExtend\N=32\I=16.
  Optimizing cells in module \aluControl.
  Optimizing cells in module \control.
    New ctrl vector for $pmux cell $procmux$1475: $auto$opt_reduce.cc:132:opt_mux$1824
    New ctrl vector for $pmux cell $procmux$1446: { $procmux$1449_CMP $auto$opt_reduce.cc:132:opt_mux$1826 }
    New ctrl vector for $pmux cell $procmux$1501: $auto$opt_reduce.cc:132:opt_mux$1828
    New ctrl vector for $pmux cell $procmux$1438: { $auto$opt_reduce.cc:132:opt_mux$1830 $procmux$1420_CMP }
    New ctrl vector for $pmux cell $procmux$1419: $auto$opt_reduce.cc:132:opt_mux$1832
    New ctrl vector for $pmux cell $procmux$1453: { $procmux$1421_CMP $procmux$1456_CMP $auto$opt_reduce.cc:132:opt_mux$1834 }
    New ctrl vector for $pmux cell $procmux$1461: $auto$opt_reduce.cc:132:opt_mux$1836
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1823: { $procmux$1476_CMP $procmux$1477_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1825: { $procmux$1440_CMP $procmux$1441_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1827: { $procmux$1498_CMP $procmux$1502_CMP $procmux$1504_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1829: { $procmux$1440_CMP $procmux$1441_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1831: { $procmux$1420_CMP $procmux$1421_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1833: { $procmux$1454_CMP $procmux$1455_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1835: { $procmux$1440_CMP $procmux$1441_CMP $procmux$1449_CMP $procmux$1454_CMP $procmux$1455_CMP }
  Optimizing cells in module \control.
  Optimizing cells in module \datapath.
  Optimizing cells in module \mips.
  Optimizing cells in module \nextPCLogic.
  Optimizing cells in module \register.
Performed a total of 79 changes.

13.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
<suppressed ~3 debug messages>
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 1 cells.

13.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

13.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..
Removed 0 unused cells and 1088 unused wires.
<suppressed ~4 debug messages>

13.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.6.9. Rerunning OPT passes. (Maybe there is more to do..)

13.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\alu\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux4to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\regfile\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shiftLeft32\N=28..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shiftLeft32\N=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\signExtend\N=32\I=16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \aluControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mips..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \nextPCLogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

13.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\alu\N=32.
  Optimizing cells in module $paramod\mux2to1\N=32.
  Optimizing cells in module $paramod\mux2to1\N=5.
  Optimizing cells in module $paramod\mux4to1\N=32.
  Optimizing cells in module $paramod\regfile\N=32.
  Optimizing cells in module $paramod\register\N=32.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\shiftLeft32\N=28.
  Optimizing cells in module $paramod\shiftLeft32\N=32.
  Optimizing cells in module $paramod\signExtend\N=32\I=16.
  Optimizing cells in module \aluControl.
  Optimizing cells in module \control.
  Optimizing cells in module \datapath.
  Optimizing cells in module \mips.
  Optimizing cells in module \nextPCLogic.
  Optimizing cells in module \register.
Performed a total of 0 changes.

13.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 0 cells.

13.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

13.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..

13.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.6.16. Finished OPT passes. (There is nothing left to do.)

13.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell $paramod\alu\N=32.$procmux$1746_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell $paramod\alu\N=32.$procmux$1747_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell $paramod\alu\N=32.$procmux$1750_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell $paramod\alu\N=32.$procmux$1751_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell $paramod\alu\N=32.$procmux$1752_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell $paramod\mux4to1\N=32.$procmux$165_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$190_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$191_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$192_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$193_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$194_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$195_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$196_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$197_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$198_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$199_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$200_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$201_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$202_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$203_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$204_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$226_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$227_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$228_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$229_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$230_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$231_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$232_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$233_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$234_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$235_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$236_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$237_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$238_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$239_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$240_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1019_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1020_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1021_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1022_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1023_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1024_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1025_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1026_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1027_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1028_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1029_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1030_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1031_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1032_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell $paramod\regfile\N=32.$procmux$1033_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell aluControl.$procmux$1720 ($pmux).
Removed top 1 bits (of 4) from mux cell aluControl.$procmux$1732 ($mux).
Removed top 1 bits (of 4) from wire aluControl.$2\ALUControl[3:0].
Removed top 1 bits (of 4) from wire aluControl.$3\ALUControl[3:0].
Removed top 3 bits (of 6) from port B of cell control.$eq$../rtl/control.v:60$26 ($eq).
Removed top 3 bits (of 6) from port B of cell control.$eq$../rtl/control.v:61$27 ($eq).
Removed top 2 bits (of 6) from port B of cell control.$eq$../rtl/control.v:62$28 ($eq).
Removed top 4 bits (of 6) from port B of cell control.$eq$../rtl/control.v:63$29 ($eq).
Removed top 1 bits (of 4) from port B of cell control.$procmux$1449_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell control.$procmux$1455_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell control.$procmux$1456_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control.$procmux$1476_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell control.$procmux$1477_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control.$procmux$1498_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control.$procmux$1504_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell control.$procmux$1538 ($mux).
Removed top 1 bits (of 4) from mux cell control.$procmux$1557 ($mux).
Removed top 1 bits (of 4) from wire control.$8\next[3:0].
Removed top 1 bits (of 4) from wire control.$9\next[3:0].

13.8. Executing PEEPOPT pass (run peephole optimizers).

13.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..
Removed 0 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

13.10. Executing TECHMAP pass (map to technology primitives).

13.10.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

13.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~928 debug messages>

13.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\alu\N=32:
  creating $macc model for $add$../rtl/alu.v:24$98 ($add).
  creating $macc model for $sub$../rtl/alu.v:29$102 ($sub).
  creating $alu model for $macc $sub$../rtl/alu.v:29$102.
  creating $alu model for $macc $add$../rtl/alu.v:24$98.
  creating $alu cell for $add$../rtl/alu.v:24$98: $auto$alumacc.cc:474:replace_alu$1841
  creating $alu cell for $sub$../rtl/alu.v:29$102: $auto$alumacc.cc:474:replace_alu$1844
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2to1\N=32:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2to1\N=5:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux4to1\N=32:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\regfile\N=32:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\register\N=32:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\register\N=4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\shiftLeft32\N=28:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\shiftLeft32\N=32:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\signExtend\N=32\I=16:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module aluControl:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module datapath:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mips:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module nextPCLogic:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module register:
  created 0 $alu and 0 $macc cells.

13.12. Executing SHARE pass (SAT-based resource sharing).

13.13. Executing OPT pass (performing simple optimizations).

13.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 0 cells.

13.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\alu\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux4to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\regfile\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shiftLeft32\N=28..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shiftLeft32\N=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\signExtend\N=32\I=16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \aluControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mips..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \nextPCLogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

13.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\alu\N=32.
  Optimizing cells in module $paramod\mux2to1\N=32.
  Optimizing cells in module $paramod\mux2to1\N=5.
  Optimizing cells in module $paramod\mux4to1\N=32.
  Optimizing cells in module $paramod\regfile\N=32.
  Optimizing cells in module $paramod\register\N=32.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\shiftLeft32\N=28.
  Optimizing cells in module $paramod\shiftLeft32\N=32.
  Optimizing cells in module $paramod\signExtend\N=32\I=16.
  Optimizing cells in module \aluControl.
  Optimizing cells in module \control.
  Optimizing cells in module \datapath.
  Optimizing cells in module \mips.
  Optimizing cells in module \nextPCLogic.
  Optimizing cells in module \register.
Performed a total of 0 changes.

13.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 0 cells.

13.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

13.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..

13.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.13.9. Finished OPT passes. (There is nothing left to do.)

13.14. Executing FSM pass (extract and optimize FSM).

13.14.1. Executing FSM_DETECT pass (finding FSMs in design).

13.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

13.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

13.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..

13.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

13.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

13.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

13.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13.15. Executing OPT pass (performing simple optimizations).

13.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 0 cells.

13.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

13.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..

13.15.5. Finished fast OPT passes.

13.16. Executing MEMORY pass.

13.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

13.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..

13.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

13.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..

13.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

13.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..

13.18. Executing OPT pass (performing simple optimizations).

13.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
<suppressed ~1 debug messages>
Optimizing module $paramod\regfile\N=32.
<suppressed ~65 debug messages>
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
<suppressed ~11 debug messages>
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 0 cells.

13.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

13.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..
Removed 4 unused cells and 15 unused wires.
<suppressed ~7 debug messages>

13.18.5. Finished fast OPT passes.

13.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

13.20. Executing OPT pass (performing simple optimizations).

13.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 0 cells.

13.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\alu\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux4to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\regfile\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shiftLeft32\N=28..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shiftLeft32\N=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\signExtend\N=32\I=16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \aluControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mips..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \nextPCLogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

13.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\alu\N=32.
  Optimizing cells in module $paramod\mux2to1\N=32.
  Optimizing cells in module $paramod\mux2to1\N=5.
  Optimizing cells in module $paramod\mux4to1\N=32.
  Optimizing cells in module $paramod\regfile\N=32.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1821: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1819: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1817: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1815: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1811: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1809: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1807: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1805: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1803: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1801: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1799: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1797: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1795: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1793: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1791: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1789: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1787: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1785: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1783: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1781: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1779: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1775: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1773: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1771: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1769: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1767: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1765: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1763: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1761: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1759: { $2\regEn[31:0] [31] $procmux$1006_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1007_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
  Optimizing cells in module $paramod\regfile\N=32.
  Optimizing cells in module $paramod\register\N=32.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\shiftLeft32\N=28.
  Optimizing cells in module $paramod\shiftLeft32\N=32.
  Optimizing cells in module $paramod\signExtend\N=32\I=16.
    Consolidated identical input bits for $mux cell $ternary$../rtl/signExtend.v:7$113:
      Old ports: A={ 17'00000000000000000 \din [14:0] }, B={ 17'11111111111111111 \din [14:0] }, Y=\dout
      New ports: A=1'0, B=1'1, Y=\dout [15]
      New connections: { \dout [31:16] \dout [14:0] } = { \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \dout [15] \din [14:0] }
  Optimizing cells in module $paramod\signExtend\N=32\I=16.
  Optimizing cells in module \aluControl.
    Consolidated identical input bits for $mux cell $procmux$1738:
      Old ports: A={ 1'0 $2\ALUControl[3:0] }, B=4'0110, Y=\ALUControl
      New ports: A=$2\ALUControl[3:0], B=3'110, Y=\ALUControl [2:0]
      New connections: \ALUControl [3] = 1'0
  Optimizing cells in module \aluControl.
  Optimizing cells in module \control.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1835: { \Branch \BranchNe $procmux$1449_CMP $procmux$1454_CMP $procmux$1455_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1831: { \IRWrite $procmux$1420_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1829: { \Branch \BranchNe }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1827: { \MemToReg \RegDst $procmux$1502_CMP }
    Consolidated identical input bits for $mux cell $procmux$1538:
      Old ports: A=3'000, B=3'101, Y=$9\next[3:0]
      New ports: A=1'0, B=1'1, Y=$9\next[3:0] [0]
      New connections: $9\next[3:0] [2:1] = { $9\next[3:0] [0] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$1574:
      Old ports: A=4'0000, B=4'1100, Y=$7\next[3:0]
      New ports: A=1'0, B=1'1, Y=$7\next[3:0] [2]
      New connections: { $7\next[3:0] [3] $7\next[3:0] [1:0] } = { $7\next[3:0] [2] 2'00 }
  Optimizing cells in module \control.
    Consolidated identical input bits for $mux cell $procmux$1606:
      Old ports: A=$7\next[3:0], B=4'1010, Y=$6\next[3:0]
      New ports: A={ $7\next[3:0] [2] $7\next[3:0] [2] 1'0 }, B=3'101, Y=$6\next[3:0] [3:1]
      New connections: $6\next[3:0] [0] = 1'0
  Optimizing cells in module \control.
  Optimizing cells in module \datapath.
  Optimizing cells in module \mips.
  Optimizing cells in module \nextPCLogic.
  Optimizing cells in module \register.
Performed a total of 39 changes.

13.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 0 cells.

13.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

13.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..

13.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
<suppressed ~1 debug messages>
Optimizing module aluControl.
Optimizing module control.
<suppressed ~2 debug messages>
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.20.9. Rerunning OPT passes. (Maybe there is more to do..)

13.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\alu\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux4to1\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\regfile\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shiftLeft32\N=28..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shiftLeft32\N=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\signExtend\N=32\I=16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aluControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mips..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \nextPCLogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

13.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\alu\N=32.
  Optimizing cells in module $paramod\mux2to1\N=32.
  Optimizing cells in module $paramod\mux2to1\N=5.
  Optimizing cells in module $paramod\mux4to1\N=32.
  Optimizing cells in module $paramod\regfile\N=32.
  Optimizing cells in module $paramod\register\N=32.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\shiftLeft32\N=28.
  Optimizing cells in module $paramod\shiftLeft32\N=32.
  Optimizing cells in module $paramod\signExtend\N=32\I=16.
  Optimizing cells in module \aluControl.
  Optimizing cells in module \control.
  Optimizing cells in module \datapath.
  Optimizing cells in module \mips.
  Optimizing cells in module \nextPCLogic.
  Optimizing cells in module \register.
Performed a total of 0 changes.

13.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 0 cells.

13.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

13.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

13.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.20.16. Finished OPT passes. (There is nothing left to do.)

13.21. Executing TECHMAP pass (map to technology primitives).

13.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

13.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=6 for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=31 for cells of type $pmux.
No more expansions possible.
<suppressed ~1083 debug messages>

13.22. Executing OPT pass (performing simple optimizations).

13.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
<suppressed ~83 debug messages>
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
<suppressed ~2 debug messages>
Optimizing module $paramod\regfile\N=32.
<suppressed ~225 debug messages>
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
<suppressed ~40 debug messages>
Optimizing module control.
<suppressed ~114 debug messages>
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
<suppressed ~330 debug messages>
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
<suppressed ~6 debug messages>
Finding identical cells in module `$paramod\regfile\N=32'.
<suppressed ~3555 debug messages>
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
<suppressed ~51 debug messages>
Finding identical cells in module `\control'.
<suppressed ~189 debug messages>
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 1377 cells.

13.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

13.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..
Removed 37 unused cells and 1105 unused wires.
<suppressed ~42 debug messages>

13.22.5. Finished fast OPT passes.

13.23. Executing ABC pass (technology mapping using ABC).

13.23.1. Extracting gate netlist of module `$paramod\alu\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 990 gates and 1060 wires to a netlist network with 68 inputs and 34 outputs.

13.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:      179
ABC RESULTS:              AOI3 cells:       36
ABC RESULTS:              AOI4 cells:       32
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOR cells:       61
ABC RESULTS:               NOT cells:       45
ABC RESULTS:              OAI3 cells:       41
ABC RESULTS:              OAI4 cells:       64
ABC RESULTS:                OR cells:       51
ABC RESULTS:             ORNOT cells:       41
ABC RESULTS:              XNOR cells:       44
ABC RESULTS:               XOR cells:       75
ABC RESULTS:        internal signals:      958
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       34
Removing temp directory.

13.23.2. Extracting gate netlist of module `$paramod\mux2to1\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

13.23.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.2.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

13.23.3. Extracting gate netlist of module `$paramod\mux2to1\N=5' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 16 wires to a netlist network with 11 inputs and 5 outputs.

13.23.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.3.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        5
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        5
Removing temp directory.

13.23.4. Extracting gate netlist of module `$paramod\mux4to1\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 202 gates and 333 wires to a netlist network with 130 inputs and 32 outputs.

13.23.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       33
ABC RESULTS:              AOI4 cells:       32
ABC RESULTS:               MUX cells:       32
ABC RESULTS:               NOR cells:        1
ABC RESULTS:             ORNOT cells:       33
ABC RESULTS:        internal signals:      171
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:       32
Removing temp directory.

13.23.5. Extracting gate netlist of module `$paramod\regfile\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 4603 gates and 5645 wires to a netlist network with 1040 inputs and 95 outputs.

13.23.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       44
ABC RESULTS:              AOI3 cells:      127
ABC RESULTS:              AOI4 cells:       64
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOT cells:      963
ABC RESULTS:              OAI3 cells:      128
ABC RESULTS:              OAI4 cells:      896
ABC RESULTS:                OR cells:     1176
ABC RESULTS:             ORNOT cells:       15
ABC RESULTS:        internal signals:     4510
ABC RESULTS:           input signals:     1040
ABC RESULTS:          output signals:       95
Removing temp directory.

13.23.6. Extracting gate netlist of module `$paramod\register\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

13.23.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.6.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

13.23.7. Extracting gate netlist of module `$paramod\register\N=4' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 13 wires to a netlist network with 9 inputs and 4 outputs.

13.23.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.7.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        4
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        4
Removing temp directory.

13.23.8. Extracting gate netlist of module `$paramod\shiftLeft32\N=28' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13.23.9. Extracting gate netlist of module `$paramod\shiftLeft32\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13.23.10. Extracting gate netlist of module `$paramod\signExtend\N=32\I=16' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13.23.11. Extracting gate netlist of module `\aluControl' to `<abc-temp-dir>/input.blif'..
Extracted 43 gates and 53 wires to a netlist network with 8 inputs and 3 outputs.

13.23.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.11.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:                OR cells:        8
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:        internal signals:       42
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        3
Removing temp directory.

13.23.12. Extracting gate netlist of module `\control' to `<abc-temp-dir>/input.blif'..
Extracted 135 gates and 147 wires to a netlist network with 10 inputs and 20 outputs.

13.23.12.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:              AOI3 cells:        9
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:       16
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              OAI3 cells:        4
ABC RESULTS:                OR cells:       31
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:        internal signals:      117
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       20
Removing temp directory.

13.23.13. Extracting gate netlist of module `\datapath' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13.23.14. Extracting gate netlist of module `\mips' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13.23.15. Extracting gate netlist of module `\nextPCLogic' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 9 wires to a netlist network with 4 inputs and 1 outputs.

13.23.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.15.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        4
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

13.23.16. Extracting gate netlist of module `\register' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

13.23.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.16.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

13.24. Executing OPT pass (performing simple optimizations).

13.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\alu\N=32.
Optimizing module $paramod\mux2to1\N=32.
Optimizing module $paramod\mux2to1\N=5.
Optimizing module $paramod\mux4to1\N=32.
Optimizing module $paramod\regfile\N=32.
Optimizing module $paramod\register\N=32.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\shiftLeft32\N=28.
Optimizing module $paramod\shiftLeft32\N=32.
Optimizing module $paramod\signExtend\N=32\I=16.
Optimizing module aluControl.
Optimizing module control.
Optimizing module datapath.
Optimizing module mips.
Optimizing module nextPCLogic.
Optimizing module register.

13.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\alu\N=32'.
<suppressed ~24 debug messages>
Finding identical cells in module `$paramod\mux2to1\N=32'.
Finding identical cells in module `$paramod\mux2to1\N=5'.
Finding identical cells in module `$paramod\mux4to1\N=32'.
Finding identical cells in module `$paramod\regfile\N=32'.
Finding identical cells in module `$paramod\register\N=32'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\shiftLeft32\N=28'.
Finding identical cells in module `$paramod\shiftLeft32\N=32'.
Finding identical cells in module `$paramod\signExtend\N=32\I=16'.
Finding identical cells in module `\aluControl'.
Finding identical cells in module `\control'.
<suppressed ~12 debug messages>
Finding identical cells in module `\datapath'.
Finding identical cells in module `\mips'.
Finding identical cells in module `\nextPCLogic'.
Finding identical cells in module `\register'.
Removed a total of 12 cells.

13.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

13.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\alu\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=32..
Finding unused cells or wires in module $paramod\mux2to1\N=5..
Finding unused cells or wires in module $paramod\mux4to1\N=32..
Finding unused cells or wires in module $paramod\regfile\N=32..
Finding unused cells or wires in module $paramod\register\N=32..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\shiftLeft32\N=28..
Finding unused cells or wires in module $paramod\shiftLeft32\N=32..
Finding unused cells or wires in module $paramod\signExtend\N=32\I=16..
Finding unused cells or wires in module \aluControl..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \mips..
Finding unused cells or wires in module \nextPCLogic..
Finding unused cells or wires in module \register..
Removed 0 unused cells and 2896 unused wires.
<suppressed ~11 debug messages>

13.24.5. Finished fast OPT passes.

13.25. Executing HIERARCHY pass (managing design hierarchy).

13.25.1. Analyzing design hierarchy..
Top module:  \mips
Used module:     \aluControl
Used module:     \control
Used module:         $paramod\register\N=4
Used module:     \datapath
Used module:         $paramod\alu\N=32
Used module:         $paramod\mux2to1\N=5
Used module:         $paramod\mux2to1\N=32
Used module:         $paramod\mux4to1\N=32
Used module:         \register
Used module:         $paramod\regfile\N=32
Used module:             $paramod\register\N=32
Used module:         $paramod\signExtend\N=32\I=16
Used module:         $paramod\shiftLeft32\N=32
Used module:         $paramod\shiftLeft32\N=28
Used module:     \nextPCLogic

13.25.2. Analyzing design hierarchy..
Top module:  \mips
Used module:     \aluControl
Used module:     \control
Used module:         $paramod\register\N=4
Used module:     \datapath
Used module:         $paramod\alu\N=32
Used module:         $paramod\mux2to1\N=5
Used module:         $paramod\mux2to1\N=32
Used module:         $paramod\mux4to1\N=32
Used module:         \register
Used module:         $paramod\regfile\N=32
Used module:             $paramod\register\N=32
Used module:         $paramod\signExtend\N=32\I=16
Used module:         $paramod\shiftLeft32\N=32
Used module:         $paramod\shiftLeft32\N=28
Used module:     \nextPCLogic
Removed 0 unused modules.

13.26. Printing statistics.

=== $paramod\alu\N=32 ===

   Number of wires:                669
   Number of wire bits:            765
   Number of public wires:           6
   Number of public wire bits:     102
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                697
     $_ANDNOT_                     179
     $_AND_                          3
     $_AOI3_                        36
     $_AOI4_                        32
     $_NAND_                        33
     $_NOR_                         61
     $_NOT_                         45
     $_OAI3_                        41
     $_OAI4_                        64
     $_ORNOT_                       41
     $_OR_                          51
     $_XNOR_                        40
     $_XOR_                         71

=== $paramod\mux2to1\N=32 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     $_MUX_                         32

=== $paramod\mux2to1\N=5 ===

   Number of wires:                  4
   Number of wire bits:             16
   Number of public wires:           4
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $_MUX_                          5

=== $paramod\mux4to1\N=32 ===

   Number of wires:                106
   Number of wire bits:            262
   Number of public wires:           6
   Number of public wire bits:     162
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                132
     $_ANDNOT_                      33
     $_AND_                          1
     $_AOI4_                        32
     $_MUX_                         32
     $_NOR_                          1
     $_ORNOT_                       33

=== $paramod\regfile\N=32 ===

   Number of wires:               3368
   Number of wire bits:           4496
   Number of public wires:          42
   Number of public wire bits:    1170
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3453
     $_ANDNOT_                      44
     $_AND_                          1
     $_AOI3_                       127
     $_AOI4_                        64
     $_MUX_                          1
     $_NAND_                         6
     $_NOT_                        963
     $_OAI3_                       128
     $_OAI4_                       896
     $_ORNOT_                       15
     $_OR_                        1176
     $paramod\register\N=32         32

=== $paramod\register\N=32 ===

   Number of wires:                  7
   Number of wire bits:            131
   Number of public wires:           6
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     $_DFF_PN0_                     32
     $_MUX_                         32

=== $paramod\register\N=4 ===

   Number of wires:                  7
   Number of wire bits:             19
   Number of public wires:           6
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $_DFF_PN0_                      4
     $_MUX_                          4

=== $paramod\shiftLeft32\N=28 ===

   Number of wires:                  2
   Number of wire bits:             56
   Number of public wires:           2
   Number of public wire bits:      56
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== $paramod\shiftLeft32\N=32 ===

   Number of wires:                  2
   Number of wire bits:             64
   Number of public wires:           2
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== $paramod\signExtend\N=32\I=16 ===

   Number of wires:                  2
   Number of wire bits:             48
   Number of public wires:           2
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== aluControl ===

   Number of wires:                 34
   Number of wire bits:             43
   Number of public wires:           3
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $_ANDNOT_                       9
     $_AOI3_                         1
     $_NAND_                         2
     $_NOR_                          4
     $_NOT_                          2
     $_OAI3_                         3
     $_ORNOT_                        5
     $_OR_                           8

=== control ===

   Number of wires:                 91
   Number of wire bits:            105
   Number of public wires:          19
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 92
     $_ANDNOT_                      16
     $_AND_                          1
     $_AOI3_                         9
     $_NAND_                         3
     $_NOR_                         15
     $_NOT_                          3
     $_OAI3_                         4
     $_ORNOT_                       10
     $_OR_                          30
     $paramod\register\N=4           1

=== datapath ===

   Number of wires:                 40
   Number of wire bits:            646
   Number of public wires:          40
   Number of public wire bits:     646
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     $paramod\alu\N=32               1
     $paramod\mux2to1\N=32           3
     $paramod\mux2to1\N=5            1
     $paramod\mux4to1\N=32           2
     $paramod\regfile\N=32           1
     $paramod\shiftLeft32\N=28       1
     $paramod\shiftLeft32\N=32       1
     $paramod\signExtend\N=32\I=16      1
     register                        6

=== mips ===

   Number of wires:                 27
   Number of wire bits:            198
   Number of public wires:          27
   Number of public wire bits:     198
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     aluControl                      1
     control                         1
     datapath                        1
     nextPCLogic                     1

=== nextPCLogic ===

   Number of wires:                  6
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_MUX_                          1
     $_OR_                           1

=== register ===

   Number of wires:                  7
   Number of wire bits:            131
   Number of public wires:           6
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     $_DFF_PN0_                     32
     $_MUX_                         32

=== design hierarchy ===

   mips                              1
     aluControl                      1
     control                         1
       $paramod\register\N=4         1
     datapath                        1
       $paramod\alu\N=32             1
       $paramod\mux2to1\N=32         3
       $paramod\mux2to1\N=5          1
       $paramod\mux4to1\N=32         2
       $paramod\regfile\N=32         1
         $paramod\register\N=32     32
       $paramod\shiftLeft32\N=28      1
       $paramod\shiftLeft32\N=32      1
       $paramod\signExtend\N=32\I=16      1
       register                      6
     nextPCLogic                     1

   Number of wires:               4742
   Number of wire bits:          12255
   Number of public wires:         410
   Number of public wire bits:    6742
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7050
     $_ANDNOT_                     314
     $_AND_                          7
     $_AOI3_                       173
     $_AOI4_                       160
     $_DFF_PN0_                   1220
     $_MUX_                       1387
     $_NAND_                        44
     $_NOR_                         82
     $_NOT_                       1013
     $_OAI3_                       176
     $_OAI4_                       960
     $_ORNOT_                      137
     $_OR_                        1266
     $_XNOR_                        40
     $_XOR_                         71

13.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\alu\N=32..
checking module $paramod\mux2to1\N=32..
checking module $paramod\mux2to1\N=5..
checking module $paramod\mux4to1\N=32..
checking module $paramod\regfile\N=32..
checking module $paramod\register\N=32..
checking module $paramod\register\N=4..
checking module $paramod\shiftLeft32\N=28..
checking module $paramod\shiftLeft32\N=32..
checking module $paramod\signExtend\N=32\I=16..
checking module aluControl..
checking module control..
checking module datapath..
checking module mips..
checking module nextPCLogic..
checking module register..
found and reported 0 problems.

14. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `$paramod\alu\N=32':
Mapping DFF cells in module `$paramod\mux2to1\N=32':
Mapping DFF cells in module `$paramod\mux2to1\N=5':
Mapping DFF cells in module `$paramod\mux4to1\N=32':
Mapping DFF cells in module `$paramod\regfile\N=32':
Mapping DFF cells in module `$paramod\register\N=32':
  mapped 32 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `$paramod\register\N=4':
  mapped 4 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `$paramod\shiftLeft32\N=28':
Mapping DFF cells in module `$paramod\shiftLeft32\N=32':
Mapping DFF cells in module `$paramod\signExtend\N=32\I=16':
Mapping DFF cells in module `\aluControl':
Mapping DFF cells in module `\control':
Mapping DFF cells in module `\datapath':
Mapping DFF cells in module `\mips':
Mapping DFF cells in module `\nextPCLogic':
Mapping DFF cells in module `\register':
  mapped 32 $_DFF_PN0_ cells to \DFFSR cells.

15. Executing ABC pass (technology mapping using ABC).

15.1. Extracting gate netlist of module `$paramod\alu\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 697 gates and 765 wires to a netlist network with 68 inputs and 34 outputs.

15.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       39
ABC RESULTS:           AOI21X1 cells:       77
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       62
ABC RESULTS:            MUX2X1 cells:        1
ABC RESULTS:           NAND2X1 cells:      118
ABC RESULTS:           NAND3X1 cells:       28
ABC RESULTS:            NOR2X1 cells:      131
ABC RESULTS:            NOR3X1 cells:        4
ABC RESULTS:           OAI21X1 cells:      157
ABC RESULTS:           OAI22X1 cells:       20
ABC RESULTS:             OR2X1 cells:       50
ABC RESULTS:           XNOR2X1 cells:       13
ABC RESULTS:            XOR2X1 cells:        4
ABC RESULTS:        internal signals:      663
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       34
Removing temp directory.

15.2. Extracting gate netlist of module `$paramod\mux2to1\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

15.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.2.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       32
ABC RESULTS:           NAND2X1 cells:       32
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

15.3. Extracting gate netlist of module `$paramod\mux2to1\N=5' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 16 wires to a netlist network with 11 inputs and 5 outputs.

15.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.3.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        5
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        5
Removing temp directory.

15.4. Extracting gate netlist of module `$paramod\mux4to1\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 132 gates and 262 wires to a netlist network with 130 inputs and 32 outputs.

15.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:        2
ABC RESULTS:           AOI22X1 cells:       64
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:       32
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:        internal signals:      100
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:       32
Removing temp directory.

15.5. Extracting gate netlist of module `$paramod\regfile\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 3421 gates and 4461 wires to a netlist network with 1040 inputs and 95 outputs.

15.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:      284
ABC RESULTS:           AOI21X1 cells:       75
ABC RESULTS:           AOI22X1 cells:     1024
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:           NAND2X1 cells:      114
ABC RESULTS:           NAND3X1 cells:      234
ABC RESULTS:            NOR2X1 cells:      219
ABC RESULTS:            NOR3X1 cells:       18
ABC RESULTS:           OAI21X1 cells:       21
ABC RESULTS:             OR2X1 cells:       14
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:     3326
ABC RESULTS:           input signals:     1040
ABC RESULTS:          output signals:       95
Removing temp directory.

15.6. Extracting gate netlist of module `$paramod\register\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

15.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.6.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       32
ABC RESULTS:           NAND2X1 cells:       32
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

15.7. Extracting gate netlist of module `$paramod\register\N=4' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 13 wires to a netlist network with 9 inputs and 4 outputs.

15.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.7.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        4
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        4
Removing temp directory.

15.8. Extracting gate netlist of module `$paramod\shiftLeft32\N=28' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

15.9. Extracting gate netlist of module `$paramod\shiftLeft32\N=32' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

15.10. Extracting gate netlist of module `$paramod\signExtend\N=32\I=16' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

15.11. Extracting gate netlist of module `\aluControl' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 42 wires to a netlist network with 8 inputs and 3 outputs.

15.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.11.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        4
ABC RESULTS:           NAND2X1 cells:        3
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        3
ABC RESULTS:        internal signals:       31
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        3
Removing temp directory.

15.12. Extracting gate netlist of module `\control' to `<abc-temp-dir>/input.blif'..
Extracted 91 gates and 101 wires to a netlist network with 10 inputs and 19 outputs.

15.12.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.12.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:             INVX1 cells:        5
ABC RESULTS:           NAND2X1 cells:       10
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR2X1 cells:       22
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:             OR2X1 cells:        7
ABC RESULTS:        internal signals:       72
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       19
Removing temp directory.

15.13. Extracting gate netlist of module `\datapath' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

15.14. Extracting gate netlist of module `\mips' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

15.15. Extracting gate netlist of module `\nextPCLogic' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 6 wires to a netlist network with 4 inputs and 1 outputs.

15.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.15.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            MUX2X1 cells:        1
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

15.16. Extracting gate netlist of module `\register' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

15.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/Users/agustincampenyscolari/Desktop/IEE2753/IEE2753-2020-agustincampeny/proyecto/synthesis/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.16.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       32
ABC RESULTS:           NAND2X1 cells:       32
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.
Removed 0 unused cells and 5957 unused wires.

16. Executing Verilog backend.
Dumping module `$paramod\alu\N=32'.
Dumping module `$paramod\mux2to1\N=32'.
Dumping module `$paramod\mux2to1\N=5'.
Dumping module `$paramod\mux4to1\N=32'.
Dumping module `$paramod\regfile\N=32'.
Dumping module `$paramod\register\N=32'.
Dumping module `$paramod\register\N=4'.
Dumping module `$paramod\shiftLeft32\N=28'.
Dumping module `$paramod\shiftLeft32\N=32'.
Dumping module `$paramod\signExtend\N=32\I=16'.
Dumping module `\aluControl'.
Dumping module `\control'.
Dumping module `\datapath'.
Dumping module `\mips'.
Dumping module `\nextPCLogic'.
Dumping module `\register'.

Warnings: 2 unique messages, 4 total
End of script. Logfile hash: 5397fa1632, CPU: user 7.67s system 0.32s
Yosys 0.9 (git sha1 UNKNOWN, clang 11.0.0 -fPIC -Os)
Time spent: 21% 13x opt_merge (1 sec), 16% 16x opt_clean (1 sec), ...
